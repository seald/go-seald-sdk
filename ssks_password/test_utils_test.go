package ssks_password

import (
	"github.com/rs/zerolog"
	"github.com/ztrue/tracerr"
	"go-seald-sdk/asymkey"
	"go-seald-sdk/sdk"
	"go-seald-sdk/test_utils"
	"math/rand"
	"time"
)

// this file should be in test_utils package, but it is not possible because it would create a cyclical import,
// so it is duplicated in sdk, ssks_password, and ssks_tmr

var preGeneratedRsaKeys = []string{
	"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",
}

func getRsaKey() (*asymkey.PrivateKey, error) {
	index := rand.Intn(len(preGeneratedRsaKeys))
	keyB64 := preGeneratedRsaKeys[index]
	return asymkey.PrivateKeyFromB64(keyB64)
}

func getPreGeneratedKeys() (*sdk.PreGeneratedKeys, error) {
	encryptionKey, err := getRsaKey()
	if err != nil {
		return nil, tracerr.Wrap(err)
	}
	signingKey, err := getRsaKey()
	if err != nil {
		return nil, tracerr.Wrap(err)
	}
	return &sdk.PreGeneratedKeys{EncryptionKey: encryptionKey, SigningKey: signingKey}, nil
}

func createTestAccount() (*sdk.State, error) {
	credentials, err := test_utils.GetCredentials()
	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	initOptions := &sdk.InitializeOptions{
		ApiURL:                    credentials.ApiUrl,
		Database:                  &sdk.MemoryStorage{},
		KeySize:                   1024,
		AppId:                     credentials.AppId,
		EncryptionSessionCacheTTL: 24 * time.Hour,
		LogLevel:                  zerolog.TraceLevel,
		Platform:                  "go-tests",
	}

	account, err := sdk.Initialize(initOptions)
	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	claims := test_utils.Claims{
		Scopes:   []test_utils.JWTPermissionScopes{test_utils.PermissionJoinTeam},
		JoinTeam: true,
	}

	jwt, err := test_utils.GetJWT(claims)
	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	preGeneratedKeys, err := getPreGeneratedKeys()
	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	_, err = account.CreateAccount(&sdk.CreateAccountOptions{
		DisplayName:      "Account_1",
		DeviceName:       "Account_1_Device_1",
		SignupJWT:        jwt,
		ExpireAfter:      time.Hour * 24 * 365 * 5,
		PreGeneratedKeys: preGeneratedKeys,
	})
	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	return account, nil
}
