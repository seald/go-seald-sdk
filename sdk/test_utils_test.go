package sdk

import (
	"encoding/base64"
	"github.com/rs/zerolog"
	"github.com/ztrue/tracerr"
	"go-seald-sdk/asymkey"
	"go-seald-sdk/symmetric_key"
	"go-seald-sdk/test_utils"
	"math/rand"
	"os"
	"time"
)

// this file should be in test_utils package, but it is not possible because it would create a cyclical import,
// so it is duplicated in sdk, ssks_password, and ssks_tmr

var preGeneratedRsaKeys = []string{
	"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",
}

func getRsaKey() (*asymkey.PrivateKey, error) {
	index := rand.Intn(len(preGeneratedRsaKeys))
	keyB64 := preGeneratedRsaKeys[index]
	return asymkey.PrivateKeyFromB64(keyB64)
}

func getPreGeneratedKeys() (*PreGeneratedKeys, error) {
	encryptionKey, err := getRsaKey()
	if err != nil {
		return nil, tracerr.Wrap(err)
	}
	signingKey, err := getRsaKey()
	if err != nil {
		return nil, tracerr.Wrap(err)
	}
	return &PreGeneratedKeys{EncryptionKey: encryptionKey, SigningKey: signingKey}, nil
}

func getPreGeneratedKeysDifferent(previousKeys []*PreGeneratedKeys) (*PreGeneratedKeys, error) {
IterationsLoop:
	for i := 0; i < 10; i++ {
		k, err := getPreGeneratedKeys()
		if err != nil {
			return nil, tracerr.Wrap(err)
		}
		for _, pk := range previousKeys {
			if pk.EncryptionKey.Public().GetHash() == k.EncryptionKey.Public().GetHash() ||
				pk.SigningKey.Public().GetHash() == k.SigningKey.Public().GetHash() {
				continue IterationsLoop
			}
		}
		return k, nil
	}
	return nil, tracerr.New("Could not generated pregenerated keys different from previous ones")
}

func getInitializeOptions(dbName string, clean bool, instanceName string) (*InitializeOptions, error) {
	credentials, err := test_utils.GetCredentials()
	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	encryptionKey, err := base64.RawStdEncoding.DecodeString(test_utils.DatabaseEncryptionKeyB64)
	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	key, err := symmetric_key.Decode(encryptionKey)

	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	dbPath, err := test_utils.GetDBPath(dbName)
	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	if clean {
		_ = os.RemoveAll(dbPath)
	}

	myStorage := &FileStorage{
		EncryptionKey: key,
		DatabaseDir:   dbPath,
	}

	return &InitializeOptions{
		ApiURL:                    credentials.ApiUrl,
		Database:                  myStorage,
		KeySize:                   1024,
		AppId:                     credentials.AppId,
		EncryptionSessionCacheTTL: 24 * time.Hour,
		LogLevel:                  zerolog.TraceLevel,
		InstanceName:              instanceName,
		Platform:                  "go-tests",
	}, nil
}

func getInMemoryInitializeOptions(instanceName string) (*InitializeOptions, error) {
	credentials, err := test_utils.GetCredentials()
	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	return &InitializeOptions{
		ApiURL:                    credentials.ApiUrl,
		Database:                  &MemoryStorage{},
		KeySize:                   1024,
		AppId:                     credentials.AppId,
		EncryptionSessionCacheTTL: 24 * time.Hour,
		LogLevel:                  zerolog.TraceLevel,
		InstanceName:              instanceName,
		Platform:                  "go-tests",
	}, nil
}

func createTestAccount(instanceName string) (*State, error) {
	initOptions1, err := getInMemoryInitializeOptions(instanceName)
	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	return createTestAccountFromOptions(initOptions1)
}

func createTestAccountFromOptions(initOptions *InitializeOptions) (*State, error) {
	account, err := Initialize(initOptions)

	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	claims := test_utils.Claims{
		Scopes:   []test_utils.JWTPermissionScopes{test_utils.PermissionJoinTeam},
		JoinTeam: true,
	}

	jwt, err := test_utils.GetJWT(claims)
	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	preGeneratedKeys, err := getPreGeneratedKeys()
	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	_, err = account.CreateAccount(&CreateAccountOptions{
		DisplayName:      "Account_go_tests",
		DeviceName:       "Account_go_tests_Device_1",
		SignupJWT:        jwt,
		ExpireAfter:      time.Hour * 24 * 365 * 5,
		PreGeneratedKeys: preGeneratedKeys,
	})

	if err != nil {
		return nil, tracerr.Wrap(err)
	}

	return account, nil
}

func stateToPreGenerated(state *State) *PreGeneratedKeys {
	// gets the keys from the account as pre-generated keys. Useful to use getPreGeneratedKeysDifferent
	d := state.storage.currentDevice.get()
	pgk := PreGeneratedKeys{EncryptionKey: d.EncryptionPrivateKey, SigningKey: d.SigningPrivateKey}
	return &pgk
}

func countOccurrences[T comparable](slice []T, value T) int {
	count := 0
	for _, item := range slice {
		if item == value {
			count++
		}
	}
	return count
}

func countOccurrencesCustom[T any](slice []T, value T, compare func(T, T) bool) int {
	count := 0
	for _, item := range slice {
		if compare(item, value) {
			count++
		}
	}
	return count
}

func compareSlices[T comparable](slice1 []T, slice2 []T) bool {
	if len(slice1) != len(slice2) {
		return false
	}
	for i := range slice1 {
		if slice1[i] != slice2[i] {
			return false
		}
	}
	return true
}
