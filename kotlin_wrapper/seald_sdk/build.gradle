import org.jetbrains.dokka.gradle.DokkaTask

plugins {
    id 'org.jetbrains.kotlin.android' version '1.9.25' apply true
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.25'
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}

tasks.register('prepareKotlinBuildScriptModel') {} // need an empty task for Android Studio gradle sync to work

tasks.withType(DokkaTask.class).configureEach {
    dokkaSourceSets.configureEach {
        includes.from('../README.md')
    }
}

tasks.register('androidSourcesJar', Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
    from android.sourceSets.main.kotlin.srcDirs
}

tasks.register('javadocJar', Jar) {
    archiveClassifier.set('javadoc')
    dependsOn dokkaJavadoc
    from dokkaJavadoc
}

artifacts {
    archives androidSourcesJar
    archives javadocJar
}

android {
    namespace 'io.seald.seald_sdk'
    group 'io.seald.seald_sdk'
    compileSdk 33

    defaultConfig {
        minSdk 26
        targetSdk 33
        versionCode findProperty('PACKAGE_VERSION_CODE')?.toInteger() ?: 1
        versionName findProperty('PACKAGE_VERSION') ?: 'unspecified'

        aarMetadata {
            minCompileSdk = 26
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    publishing {
        singleVariant('release')
    }
}

tasks.register('combineInternalsAar') {
    doLast { // "doLast" so it is only run during "execution" phase of gradle, not the "configuration" phase
        def aarFile = file("${buildDir}/outputs/aar/${project.name}-release.aar")
        if (aarFile.exists()) {
            exec {
                workingDir project.rootDir
                executable = 'bash'
                args '-c', "./merge-aar.sh --input1 ${aarFile.absolutePath} --input2 ./goLibs/seald-sdk-internals.aar --output ${aarFile.absolutePath}"
            }
        } else {
            throw new GradleException('AAR file does not exist, failing build.')
        }
    }
}

afterEvaluate { // must use 'afterEvaluate' because 'bundleReleaseAar' & 'signReleasePublication' are generated dynamically by plugins
    tasks.named('bundleReleaseAar').configure {
        finalizedBy('combineInternalsAar')
    }

    tasks.named('signReleasePublication').configure {
        mustRunAfter('combineInternalsAar')
    }
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'io.seald'
            artifactId = 'seald_sdk_android'
            version = findProperty('PACKAGE_VERSION') ?: 'unspecified'
            afterEvaluate {
                from components.release
                artifact androidSourcesJar
                artifact javadocJar
            }
            pom {
                name = 'Seald SDK'
                description = 'Seald SDK for android'
                url = 'https://www.seald.io/'
                licenses {
                    license {
                        name = 'Seald License'
                        url = 'https://www.seald.io/licence-service-agreement-sdk'
                    }
                }
                developers {
                    developer {
                        id = 'seald'
                        name = 'Seald SAS'
                        email = 'contact-maven@seald.io'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/seald'
                    developerConnection = 'scm:git:https://github.com/seald'
                    url = 'https://github.com/seald'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'Local'
            url = "${buildDir}/localRepo"
        }
    }
}

tasks.withType(PublishToMavenRepository).configureEach { publishTask -> // block publication if PACKAGE_VERSION is not set
    publishTask.doFirst {
        if (!project.hasProperty('PACKAGE_VERSION') || project.PACKAGE_VERSION == null || project.PACKAGE_VERSION == 'unspecified' || project.PACKAGE_VERSION == '') {
            throw new GradleException('PACKAGE_VERSION is not set. Publication is not allowed.')
        }
    }
}

signing {
    def signingKeyId = findProperty('signing.keyId')
    def signingKey = findProperty('signing.key')
    def signingPassword = findProperty('signing.password')
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.release
}

dependencies {
    compileOnly project(':goLibs') // 'compileOnly' so that internals are available during build time, but not exposed as a dependency in output module, because they will be merged in the final AAR anyway.
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4')
    implementation('org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0')
}
